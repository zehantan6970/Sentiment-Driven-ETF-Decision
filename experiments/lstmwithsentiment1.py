import pandas as pd
from snownlp import SnowNLP
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt

# --------------------------
# 步骤1: 处理情感数据
# --------------------------

# 示例情感数据
sentiment_data = [
    ('2024-09-30', '成本，我怎么一点都不慌坚毅得斯威夫特'),
    ('2024-09-30', '你小子不讲武德，下午拉这么快。还好我上午意志坚定，好学的胖哥'),
    ('2024-09-30', '你把我气笑了，必须举报你上班炒股'),
    ('2024-09-30', '这是什么垃圾，持仓涨那么多，竟然是绿的小迪财源滚滚'),
    ('2024-09-30', '你就是个笑话！诙谐幽默的锦华'),
    ('2024-09-30', '今天这个行情，估值还高于现价，下午必定涨回来'),
    ('2024-09-30', '还是被算计了！深陷其中不能自拔'),
    ('2024-09-30', '涨上来啊，就你绿了'),
    ('2024-09-30', '为什么是绿的我来股市是挣钱的'),
    ('2024-09-30', '为什么没动静？金融股全线涨吧'),
    ('2024-10-08', '公告 汇添富基金管理股份有限公司关于中证金融地产交易型开基金资讯'),
    ('2024-10-08', '有没有拿这支股很久的大哥简单说说银行板块基民'),
    ('2024-10-10', '持仓大部分大涨，为什么还绿'),
    ('2024-10-10', '这还有救吗'),
    ('2024-10-10', '是不是延时了'),
    ('2024-10-14', '主要追踪的是银行，应该还有一波'),
    ('2024-10-14', '这个经理是吗，滚出来'),
    ('2024-10-15', '港股金融疯涨，这个下周开盘怕是要直接封涨停了'),
    ('2024-10-15', '这都是小白吗？怎么折价率0.4%了都有人疯狂压价'),
    ('2024-10-16', '这都是什么情况'),
    ('2024-10-24', '公告 中证金融地产交易型开放式指数证券投资基金'),
    ('2024-10-28', '截至上个交易日(10月25日)，该基金近五个交易日净值(复权单位净值，下同）下跌1.03%，近一个月净值上涨16.36%。汇添富中证金融地产ETF(159931)下跌0.5% '),
    ('2024-10-29', '市场现象的引人注目之处. 在2024年10月28日，金融ETF（159931）的份额出现了显著的减少,50万份的缩水使其最新份额降至4932.85万份。金融ETF份额骤降50万.背后的市场动向值得关注'),
    ('2024-12-18', '机构增持信号明显，长期看涨'),
    ('2024-12-19', 'ETF成分股遭做空，短期波动率上升'),
    ('2024-12-20', '全球通胀数据回落，市场情绪回暖'),
    ('2024-12-23', '行业政策变动引发投资者担忧'),
    ('2024-12-24', '某ETF持仓公司财报超预期，股价大涨'),
    ('2024-12-25', '地缘政治风险加剧，市场避险情绪升温'),
    ('2024-12-26', '美联储暂停加息，科技股反弹'),
    ('2024-12-31', '金融ETF（159931）份额为5232.85万份，规模为9541.58万元。即该基金今年以来份额增加0.96%，规模减少3.65%。金融ETF（159931）涨1.90%，成交额341.05万元'),
    ('2025-01-02', '南财金融终端显示，今日互联网保险主题走弱，截至收盘(下同)下跌4.55%。持有互联网保险主题股票的汇添富中证金融地产ETF(159931)下跌3.62%，最新价报1.759元'),
    ('2025-01-08', '港股市场方面，港股通金融ETF、恒生科技HKETF涨超1%。恒生红利ETF、港股高股息ETF、中概互联网ETF等涨超0.8%。 港股早盘低开 腾讯回购15亿港元'),
    ('2025-01-09', '回顾金融ETF（159931，这是一支由汇添富基金管理股份有限公司管理的交易型开放式指数基金，成立于2013年8月23日，至今已取得了77.53%的累计回报。然而，近一个月内却出现了5.17%的回撤。这一波动并不罕见，市场的波动性往往令投资者捉摸不定。金融ETF开盘小幅震荡'),
    ('2025-01-13', '银行股集体走弱，金融ETF（510230）跌超0.9%，资金逆势布局，近10日净流入额超2.2亿元浙商证券表示，展望2025年，银行股还有绝对收益机会'),
    ('2025-01-14', '汇添富中证金融地产ETF（159931）实现了2.39%的涨幅，成交额达到77.95万元。这一佳绩引发市场的关注，尤其是在一系列经济数据和政策变化'),
    ('2025-01-14', '南财金融终端显示，今日跨境支付（CIPS）主题走强，截至收盘(下同)上涨1.06% 持有跨境支付（CIPS）主题股票的汇添富中证金融地产ETF(159931)上涨2.39%，最新价报1.756元'),
    ('2025-01-15', '金融ETF（159931）重仓股方面，中国平安开盘跌0.22%，招商银行涨0.35%，兴业银行涨0.10%，中信证券跌0.76%，东方财富跌1.30%，工商银行跌0.15%，交通银行涨0.00% 。金融ETF（159931）开盘涨0.00%，重仓股中国平安跌0.22%'),
    ('2025-01-16', '港股通金融ETF（513190）布局港股中以银行为主的大金融行业，兼具低估值、高股息、高“中特估”含量等属性,再受政策提振，信贷需求积极信号出现，25年银行业有望持续转好'),
    ('2025-01-16', '汇添富中证金融地产ETF（159931）收盘小幅上涨0.51%，成交额达到74.18万元。这支基金自2013年成立以来，一直是追踪中证金融地产指数。金融ETF（159931）微涨0.51% 市场信心依旧'),
    ('2025-01-20', 'ETF(159892)，+1.72% 　　一键打包港股通标的：港股通ETF(513990)，+1.77% 　　港股主板龙头股代表：恒生ETF(159920)，+1.72% 　　蔚小理米港股汽车产业链：港股通汽车(159323),+1.40%港股牛市。中国资产沸腾，港股今日强势大涨，机构看好港股春节前迎反弹窗口'),
    ('2025-01-21', '金融ETF（159931）在开盘时下跌了0.28%，报1.758元，尽管其重仓股如中国平安和招商银行却表现出色，分别上涨0.78%和0.50%。金融ETF开盘小幅下跌，中国平安和招商银行逆势上涨'),
    ('2025-01-21', '金融科技创新监管工具稳步实施，监管规则体系和监管框架不断健全，金融守正创新能力大幅提高。总的看，我国金融科技发展从星星之火到百舸争流 '),
    ('2025-01-21', '跨境ETF作妖！港股通金融ETF拉升超5%后跳水'),
    ('2025-01-22', '中央汇金投资持有的易方达深证100ETF、易方达上证50ETF、易方达上证科创板50ETF、易方达创业板ETF、华夏中证1000ETF、华夏中证500ETF、广发中证1000ETF、南方中证500ETF、南方中证1000ETF、华安上证180ETF、富国中证1000ETF。中央汇金，继续增持'),
    ('2025-01-23', '今日银行、证券保险、金融地产等大金融主题ETF涨幅居前，银行ETF天弘（515290）、银行ETF基金（512700）、金融ETF（510230）、金融地产ETF（510650）等涨超2%。罕见一幕 今天盘中停牌，明天仍停牌'),
    ('2025-01-23', '汇添富中证金融地产ETF（159931）以1.90%的涨幅收盘，成交额达341.05万元，展现出投资者对金融板块的热情。金融ETF（159931）涨幅显著，背后原因何在'),
    ('2025-01-24', '金融ETF（159931）表现抢眼，上午交易中涨幅达到0.73%，成交额为187.97万元，收于1.785元。这一数据引起了市场投资者和分析师的关注。金融ETF（159931）半日涨0.73%，投资者该如何解读'),
    ('2025-01-24', '金融科技ETF（159851.SZ）收涨2.49%，主力资金（单笔成交额100万元以上）净流入7596.83万元，居可比基金首位。 金融科技ETF(159851)主力资金净流入7596.83万元'),
    ('2025-01-27', '南财金融终端显示，今日跨境支付（CIPS）主题走强，截至午间收盘(下同)上涨2.09%。持有跨境支付（CIPS）主题股票的汇添富中证金融地产ETF(159931)早盘下跌0.06%，最新价报1.782元')
    # 添加更多的情感数据...
]

# 创建DataFrame
sentiment_df = pd.DataFrame(sentiment_data, columns=['Date', 'Sentiment_Content'])

# 使用SnowNLP计算每条情感的得分
def get_sentiment_score(text):
    s = SnowNLP(text)
    return s.sentiments  # 返回情感得分，0-1之间，越接近1表示越正面

# 计算每条新闻的情感得分
sentiment_df['Sentiment_Score'] = sentiment_df['Sentiment_Content'].apply(get_sentiment_score)

# 按日期汇总情感得分，取平均
sentiment_daily = sentiment_df.groupby('Date')['Sentiment_Score'].mean().reset_index()

# 填充缺失值（如没有情感数据的日期）
sentiment_daily['Sentiment_Score'].fillna(0, inplace=True)

# 显示情感数据
print("情感数据:")
print(sentiment_daily)

# --------------------------
# 步骤2: 将情感数据与价格数据合并
# --------------------------

# 示例价格数据
price_data ={
    'Date': [
        '2025-01-24', '2025-01-23', '2025-01-22', '2025-01-21', '2025-01-20',
        '2025-01-17', '2025-01-16', '2025-01-15', '2025-01-14', '2025-01-13',
        '2025-01-10', '2025-01-09', '2025-01-08', '2025-01-07', '2025-01-06',
        '2025-01-03', '2025-01-02', '2024-12-31', '2024-12-30', '2024-12-27',
        '2024-12-26', '2024-12-25', '2024-12-24', '2024-12-23', '2024-12-20',
        '2024-12-19', '2024-12-18', '2024-12-17', '2024-12-16', '2024-12-13',
        '2024-12-12', '2024-12-11', '2024-12-10', '2024-12-09', '2024-12-06',
        '2024-12-05', '2024-12-04', '2024-12-03', '2024-12-02', '2024-11-29',
        '2024-11-28', '2024-11-27', '2024-11-26', '2024-11-25', '2024-11-22',
        '2024-11-21', '2024-11-20', '2024-11-19', '2024-11-18', '2024-11-15',
        '2024-11-14', '2024-11-13', '2024-11-12', '2024-11-11', '2024-11-08',
        '2024-11-07', '2024-11-06', '2024-11-05', '2024-11-04', '2024-11-01',
        '2024-10-31', '2024-10-30', '2024-10-29', '2024-10-28', '2024-10-25',
        '2024-10-24', '2024-10-23', '2024-10-22', '2024-10-21', '2024-10-18',
        '2024-10-17', '2024-10-16', '2024-10-15', '2024-10-14', '2024-10-11',
        '2024-10-10', '2024-10-09', '2024-10-08', '2024-09-30'
    ],
    'Close': [
        1.783, 1.772, 1.739, 1.766, 1.763, 1.763, 1.765, 1.756, 1.756, 1.715,
        1.725, 1.743, 1.751, 1.752, 1.738, 1.732, 1.759, 1.825, 1.868, 1.849,
        1.844, 1.847, 1.846, 1.814, 1.816, 1.811, 1.823, 1.814, 1.817, 1.824,
        1.870, 1.855, 1.863, 1.846, 1.850, 1.827, 1.818, 1.829, 1.815, 1.806,
        1.785, 1.793, 1.769, 1.756, 1.765, 1.829, 1.823, 1.827, 1.819, 1.814,
        1.848, 1.861, 1.863, 1.888, 1.907, 1.954, 1.864, 1.875, 1.822, 1.795,
        1.789, 1.770, 1.790, 1.794, 1.803, 1.803, 1.809, 1.801, 1.799, 1.829,
        1.770, 1.790, 1.764, 1.809, 1.773, 1.772, 1.843, 2.048, 1.862
    ]
}


# 将价格数据转化为DataFrame
price_df = pd.DataFrame(price_data)

# 转换Date列为日期格式
price_df['Date'] = pd.to_datetime(price_df['Date'])
sentiment_daily['Date'] = pd.to_datetime(sentiment_daily['Date'])

# 合并情感得分和价格数据
merged_df = pd.merge(price_df, sentiment_daily, on='Date', how='left')

# 填充缺失的情感得分（默认填充为0）
merged_df['Sentiment_Score'].fillna(0, inplace=True)

# 显示合并后的数据
print("合并后的数据:")
print(merged_df)

# --------------------------
# 步骤3: LSTM模型训练
# --------------------------

# 预处理数据，使用MinMaxScaler对价格和情感得分进行归一化
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(merged_df[['Close', 'Sentiment_Score']])

# 创建LSTM数据集
def create_dataset(data, time_step=1):
    X, y = [], []
    for i in range(len(data) - time_step):
        X.append(data[i:(i + time_step), :])
        y.append(data[i + time_step, 0])  # 预测的是Close价格
    return np.array(X), np.array(y)

# 使用过去10天的数据来预测未来一天的价格
time_step = 10
X, y = create_dataset(scaled_data, time_step)

# 拆分数据集为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# 重新调整数据为LSTM输入格式 (samples, time steps, features)
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 2)  # 2个特征：Close和Sentiment_Score
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 2)

# 定义LSTM模型
class LSTMModel(nn.Module):
    def __init__(self, input_size=2, hidden_layer_size=50, output_size=1):
        super(LSTMModel, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_layer_size, batch_first=True)
        self.linear = nn.Linear(hidden_layer_size, output_size)

    def forward(self, x):
        out, _ = self.lstm(x)
        out = self.linear(out[:, -1, :])  # 取最后一个时间步的输出
        return out

# 创建模型
model = LSTMModel(input_size=2, hidden_layer_size=50, output_size=1)

# 损失函数和优化器
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# 训练模型
epochs = 100
for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    y_pred = model(torch.FloatTensor(X_train))
    loss = criterion(y_pred, torch.FloatTensor(y_train).view(-1, 1))
    loss.backward()
    optimizer.step()
    if (epoch+1) % 10 == 0:
        print(f'Epoch {epoch+1}/{epochs}, Loss: {loss.item()}')

# 预测并反归一化
model.eval()
predicted_price = model(torch.FloatTensor(X_test)).detach().numpy()

# 反归一化预测数据（将情感得分填充为零，保持数据维度一致）
predicted_price = np.hstack((predicted_price.reshape(-1, 1), np.zeros_like(predicted_price.reshape(-1, 1))))  # 添加一个全零列（情感得分列）
predicted_price = scaler.inverse_transform(predicted_price)[:, 0]  # 反归一化后只取价格部分

# 反归一化实际测试数据（y_test），确保与训练时的数据格式一致
y_test_actual = np.hstack((y_test.reshape(-1, 1), np.zeros_like(y_test.reshape(-1, 1))))  # 添加一个全零列（情感得分列）
y_test_actual = scaler.inverse_transform(y_test_actual)[:, 0]  # 反归一化后只取价格部分

# 绘制结果
plt.plot(y_test_actual, label='True Price')
plt.plot(predicted_price, label='Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.title('LSTM - Stock Price Prediction with Sentiment')
plt.legend()
plt.show()
# --------------------------
# 预测2025-01-27的价格
# --------------------------

# 预测2025-01-27的价格
last_10_days = scaled_data[-time_step:].reshape(1, time_step, 2)
predicted_27th = model(torch.FloatTensor(last_10_days)).detach().numpy()

# 将预测结果与情感得分列（全为零）拼接，确保是二维数组
predicted_27th = np.hstack((predicted_27th.reshape(-1, 1), np.zeros_like(predicted_27th.reshape(-1, 1))))

# 反归一化
predicted_27th = scaler.inverse_transform(predicted_27th)[:, 0]  # 只取价格部分

# 打印预测结果
print(f"Predicted stock price for 2025-01-27: {predicted_27th[0]}")
